/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.codejumble.opentube;

import com.codejumble.opentube.downloader.DownloadManager;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author lope115
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    /**
     * Creates new form Main
     */
    private final Font PLACEHOLDER_FONT = new Font("Verdana", Font.ITALIC, 12);
    private final Font INPUT_FONT = new Font("Verdana", Font.PLAIN, 12);
    private Properties configuration;
    private String configuredFolderForDownloadedMedia;
    private String tmpFilesFolder;
    private String logsFolder;
    private String settingsFilePath = "src" + File.separator + "main" + File.separator + "resources" + File.separator + "conf" + File.separator + "settings.conf";

    private DownloadManager defaultDownloadManager;

    public Main() {
        // Load configuration
        try {
            configuration = loadConfiguration();
        } catch (FileNotFoundException e) {
            createErrorDialog(this, e.getMessage(), "Fatal error");
            System.exit(1);
        } catch (IOException e) {
            createErrorDialog(this, e.getMessage(), "Fatal error");
            System.exit(1);
        } catch (Exception e) {
            createErrorDialog(this, e.getMessage(), "Fatal error");
            System.exit(1);
        }

        initParameters();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mediaFormatButtonGroup = new javax.swing.ButtonGroup();
        videoURLDownloadButton = new javax.swing.JButton();
        downloadProgressBar = new javax.swing.JProgressBar();
        videoURLField = new javax.swing.JTextField();
        pathURLLabel = new javax.swing.JLabel();
        pathURLField = new javax.swing.JTextField();
        videoURLLabel1 = new javax.swing.JLabel();
        fileNameField = new javax.swing.JTextField();
        fileURLLabel = new javax.swing.JLabel();
        mp4FormatOption = new javax.swing.JRadioButton();
        flvFormatOption = new javax.swing.JRadioButton();
        aviFormatOption = new javax.swing.JRadioButton();
        fileFormatLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        settingsItem = new javax.swing.JMenuItem();
        quitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpPagesItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OpenTube v1.0 - www.codejumble.com");
        setName("OpenTubeMainFrame"); // NOI18N
        setResizable(false);

        videoURLDownloadButton.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        videoURLDownloadButton.setText("Download!");
        videoURLDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoURLDownloadButtonActionPerformed(evt);
            }
        });

        downloadProgressBar.setMaximum(100);
        downloadProgressBar.setMinimum(0);
        downloadProgressBar.setStringPainted(true);

        videoURLField.setFont(new java.awt.Font("Verdana", 2, 11)); // NOI18N
        videoURLField.setText("Video URL");
        videoURLField.setToolTipText("");
        videoURLField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                videoURLFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                videoURLFieldFocusLost(evt);
            }
        });

        pathURLLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        pathURLLabel.setText("Path");

        pathURLField.setEditable(false);
        pathURLField.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        pathURLField.setText(configuredFolderForDownloadedMedia);
        pathURLField.setToolTipText("");
        pathURLField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pathURLFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pathURLFieldFocusLost(evt);
            }
        });

        videoURLLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        videoURLLabel1.setText("URL");

        fileNameField.setFont(new java.awt.Font("Verdana", 2, 11)); // NOI18N
        fileNameField.setText("Destiny file name");
        fileNameField.setToolTipText("");
        fileNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fileNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fileNameFieldFocusLost(evt);
            }
        });

        fileURLLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        fileURLLabel.setText("File");

        mediaFormatButtonGroup.add(mp4FormatOption);
        mp4FormatOption.setSelected(true);
        mp4FormatOption.setText("mp4");

        mediaFormatButtonGroup.add(flvFormatOption);
        flvFormatOption.setText("flv");

        mediaFormatButtonGroup.add(aviFormatOption);
        aviFormatOption.setText("avi");

        fileFormatLabel.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        fileFormatLabel.setText("Format");

        statusLabel.setText("Status:");

        status.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        status.setText("Ready");

        fileMenu.setText("File");

        settingsItem.setText("Settings");
        settingsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsItemActionPerformed(evt);
            }
        });
        fileMenu.add(settingsItem);

        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        helpPagesItem.setText("Help pages");
        helpPagesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpPagesItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpPagesItem);

        aboutItem.setText("About");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(52, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(statusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(status))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(videoURLLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pathURLLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addComponent(fileURLLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pathURLField)
                                    .addComponent(videoURLField)
                                    .addComponent(fileNameField, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(videoURLDownloadButton)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileFormatLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(mp4FormatOption)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(flvFormatOption)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(aviFormatOption)))))
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(fileFormatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoURLDownloadButton)
                    .addComponent(videoURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(videoURLLabel1)
                    .addComponent(mp4FormatOption)
                    .addComponent(flvFormatOption)
                    .addComponent(aviFormatOption))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathURLLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileURLLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(status)))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void videoURLFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_videoURLFieldFocusGained
        if (videoURLField.getText().length() <= 0 || videoURLField.getText().equals("Video URL")) {
            videoURLField.setFont(INPUT_FONT);
            videoURLField.setText("");
        }
    }//GEN-LAST:event_videoURLFieldFocusGained

    private void videoURLFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_videoURLFieldFocusLost
        if (videoURLField.getText().length() <= 0 || videoURLField.getText().equals("Video URL")) {
            videoURLField.setFont(PLACEHOLDER_FONT);
            videoURLField.setText("Video URL");
        }
    }//GEN-LAST:event_videoURLFieldFocusLost

    private void pathURLFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pathURLFieldFocusGained
        if (pathURLField.getText().length() <= 0 || pathURLField.getText().equals("Destiny file path")) {
            pathURLField.setFont(INPUT_FONT);
            pathURLField.setText("");
        }
    }//GEN-LAST:event_pathURLFieldFocusGained

    private void pathURLFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pathURLFieldFocusLost
        if (pathURLField.getText().length() <= 0 || pathURLField.getText().equals("Destiny file path")) {
            pathURLField.setFont(PLACEHOLDER_FONT);
            pathURLField.setText("Destiny file path");
        }
    }//GEN-LAST:event_pathURLFieldFocusLost

    private void videoURLDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoURLDownloadButtonActionPerformed
        videoURLDownloadButton.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            defaultDownloadManager.addDownloadToQueue(videoURLField.getText(), pathURLField.getText() + fileNameField.getText(), getSelectedFormatOption());
            if (isWaitingForTasks()) {
                defaultDownloadManager.execute();
            }
        } catch (MalformedURLException ex) {
            createErrorDialog(this, "The inputted URL doesn't match a valid format", "Wrong URL format");
        } catch (RuntimeException ex) {
            createErrorDialog(this, "The provided website is not supported", "Unsupported website");
        } catch (Exception e) {
            createErrorDialog(this, "An error occured. Please try again.", "Unexpected error");
        }
        videoURLDownloadButton.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_videoURLDownloadButtonActionPerformed

    private void fileNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileNameFieldFocusGained
        if (fileNameField.getText().length() <= 0 || fileNameField.getText().equals("Destiny file name")) {
            fileNameField.setFont(INPUT_FONT);
            fileNameField.setText("");
        }
    }//GEN-LAST:event_fileNameFieldFocusGained

    private void fileNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileNameFieldFocusLost
        if (fileNameField.getText().length() <= 0 || fileNameField.getText().equals("Destiny file name")) {
            fileNameField.setFont(PLACEHOLDER_FONT);
            fileNameField.setText("Destiny file name");
        }
    }//GEN-LAST:event_fileNameFieldFocusLost

    private void helpPagesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpPagesItemActionPerformed
        try {
            URI uri = new URL("http://www.codejumble.com").toURI();
            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(uri);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception ex) {
            /* Log unexpected crash */
        }
    }//GEN-LAST:event_helpPagesItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(this, "OpenTube v1.0\nVisit www.codejumble.com", "About OpenTube", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void settingsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsItemActionPerformed
        JTextField setting = new JTextField(configuredFolderForDownloadedMedia);
        Object[] settings = {
            "Downloads folder", setting
        };

        int option = JOptionPane.showConfirmDialog(null, settings, "Settings", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            configuration.setProperty("downloadFolder", setting.getText());
            try {
                FileOutputStream writer = new FileOutputStream(settingsFilePath);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_settingsItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JRadioButton aviFormatOption;
    private javax.swing.JProgressBar downloadProgressBar;
    private javax.swing.JLabel fileFormatLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JLabel fileURLLabel;
    private javax.swing.JRadioButton flvFormatOption;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpPagesItem;
    private javax.swing.ButtonGroup mediaFormatButtonGroup;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton mp4FormatOption;
    private javax.swing.JTextField pathURLField;
    private javax.swing.JLabel pathURLLabel;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JMenuItem settingsItem;
    private javax.swing.JLabel status;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton videoURLDownloadButton;
    private javax.swing.JTextField videoURLField;
    private javax.swing.JLabel videoURLLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if ("progress".equals(pce.getPropertyName())) {
            int progress = (Integer) pce.getNewValue();
            downloadProgressBar.setValue(progress);
        }
    }

    private String getSelectedFormatOption() {
        String format = "mp4";
        for (Enumeration<AbstractButton> buttons = mediaFormatButtonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                format = button.getText();
            }
        }

        return format;
    }

    public boolean isWaitingForTasks() {
        return status.getText().equals("Ready");
    }

    public void changeStatus(String newStatus) {
        status.setText(newStatus);
    }

    public static void createErrorDialog(JFrame frame, String content, String name) {
        JOptionPane.showMessageDialog(frame,
                content,
                name,
                JOptionPane.ERROR_MESSAGE);
    }

    private void initParameters() {
        String relativePath = configuration.getProperty("downloadFolder");
        configuredFolderForDownloadedMedia = new File(relativePath).getAbsolutePath() + File.separator;
        tmpFilesFolder = configuration.getProperty("tmpFolder");
        logsFolder = configuration.getProperty("logsFolder");
        defaultDownloadManager = new DownloadManager(this, tmpFilesFolder, configuredFolderForDownloadedMedia);
    }

    private Properties loadConfiguration() throws FileNotFoundException, IOException {
        InputStream input = new FileInputStream(settingsFilePath);
        if (input == null) {
            throw new FileNotFoundException("Configuration files could not be found");
        }
        Properties prop = new Properties();
        prop.load(input);
        return prop;
    }
}
